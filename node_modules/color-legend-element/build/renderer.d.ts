import { TemplateResult } from "lit";
import { ColorLegendElement } from "./color-legend-element";
import { Interpolator } from "./types";
/** handles rendering the HTML for the color-legend
 * @ignore - for custom-elements.json
 */
export declare class Renderer {
    cle: ColorLegendElement;
    constructor(colorLegendElement: ColorLegendElement);
    /**
     * render: handles rendering HTML & SVG markup for the current scaleType
     * @returns TemplateResult
     */
    render(): TemplateResult<1>;
    /**
     * Renders a categorical legend html
     * @returns lit-html TemplateResult or empty string
     */
    renderCategorical(): TemplateResult | string;
    /**
     * Renders the continuous legend's color ramp SVG image
     * @returns lit-html TemplateResult or empty string
     */
    renderContinuous(): "" | TemplateResult<2>;
    /**
     * Renders SVG Rects for a discrete or threshold color scale
     * @returns lit-html TemplateResult or empty string
     */
    renderDiscreteThreshold(): "" | TemplateResult<2>;
    /**
     * Renders the legend's SVG x axis
     * @returns lit-html TemplateResult or empty string
     */
    renderAxis(): TemplateResult | string;
    /**
     * getColorRamp: constructs the canvas element used for continuous legends
     * @param colorInterpolator an interpolator function, e.g. one from d3-scale-chromatic
     * @param n width of canvas / number of colors
     * @returns HTMLCanvasElement
     */
    getColorRamp(colorInterpolator: Interpolator<string>, n?: number): HTMLCanvasElement;
}
//# sourceMappingURL=renderer.d.ts.map