import { scaleSequential, scaleLinear, scaleThreshold, scaleOrdinal, scaleQuantize, } from "d3-scale";
import { interpolateHcl } from "d3-interpolate";
/**
 * handles setting the color scale for the color-legend
 * @ignore - for custom-elements.json
 */
export class ColorScaleSetter {
    constructor(cle) {
        this.cle = cle;
    }
    /**
     * Sets the colorScale value from the scaleType value
     */
    setColorScale() {
        switch (this.cle.scaleType) {
            case "continuous":
                this.setContinousColorScale();
                break;
            case "discrete":
                this.setDiscreteColorScale();
                break;
            case "threshold":
                this.setThresholdColorScale();
                break;
            case "categorical":
                this.setCategoricalColorScale();
                break;
            default:
                this.invalidScaleType(this.cle.scaleType);
        }
    }
    /**
     * Sets the colorScale property to either a ScaleSequential or ScaleLinear
     */
    setContinousColorScale() {
        const { interpolator, domain, range } = this.cle;
        this.colorScale = interpolator
            ? scaleSequential(interpolator).domain(domain)
            : scaleLinear()
                .range(range)
                .domain(domain)
                .interpolate(interpolateHcl);
    }
    /**
     * Sets the colorScale property to a ScaleQuantize
     */
    setDiscreteColorScale() {
        this.colorScale = scaleQuantize()
            .domain(this.cle.domain)
            .range(this.cle.range);
    }
    /**
     * Sets the colorScale property to a ScaleThreshold
     */
    setThresholdColorScale() {
        const domain = this.cle.domain;
        this.colorScale = scaleThreshold()
            .domain(domain.slice(1, domain.length - 1))
            .range(this.cle.range);
    }
    /**
     * Sets the colorScale to a ScaleOrdinal
     */
    setCategoricalColorScale() {
        this.colorScale = scaleOrdinal()
            .domain(this.cle.domain)
            .range(this.cle.range);
    }
    /**
     * Handles warning the user they provided an invalid scale type
     * @param value string
     */
    invalidScaleType(value) {
        throw new Error(`invalid property scaletype: ${value}.
      Must be one of "categorical", "continuous", "discrete", "threshold".`);
    }
}
//# sourceMappingURL=color-scale.js.map