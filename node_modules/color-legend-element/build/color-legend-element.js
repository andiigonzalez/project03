var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement } from "lit";
import { customElement, property, query } from "lit/decorators.js";
import { ColorScaleSetter } from "./color-scale";
import { Renderer } from "./renderer";
import { AxisTicksSetter } from "./x-scale-axis";
import { styles } from "./styles";
import { COLOR_SCALE_PROPS, AXIS_AND_X_SCALE_PROPS, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_MARGIN_BOTTOM, DEFAULT_MARGIN_LEFT, DEFAULT_MARGIN_RIGHT, DEFAULT_MARGIN_TOP, DEFAULT_TITLE_TEXT, DEFAULT_DOMAIN, DEFAULT_RANGE, DEFAULT_SCALE_TYPE, DEFAULT_MARK_TYPE, DEFAULT_TICKS, DEFAULT_TICK_FORMAT, DEFAULT_TICK_SIZE, } from "./constants";
// NOTE: the JS Doc strings that follow are used to create the custom-elements.json manifest
// See [Open Web Components](https://custom-elements-manifest.open-wc.org/analyzer/getting-started/) for more info.
/**
 * @tagname color-legend
 * @summary A custom element that renders a legend suitable for use with data visualizations.
 *
 * @slot subtitle - content to display below the main title
 * @slot footer - content to display under the legend color bar or items
 *
 * @cssproperty [--cle-font-family = sans-serif] Font used for tick and legend item text
 * @cssproperty [--cle-font-family-title = var(--cle-font-family)] Font used for the legend's title text
 * @cssproperty [--cle-font-size = 0.75rem] Font size for the tick and legend item text
 * @cssproperty [--cle-font-size-title = 0.875rem] Font size for the legend title text
 * @cssproperty [--cle-letter-spacing = 0.3px] Letter spacing for tick and legend item text
 * @cssproperty [--cle-letter-spacing-title = 0.25px] Letter spacing for the legend title text
 * @cssproperty [--cle-font-weight = 400] Font weight for the tick and legend item text
 * @cssproperty [--cle-font-weight-title = 500] Font weight for the title text
 * @cssproperty [--cle-color = currentColor] Font color for all text and tick lines
 * @cssproperty [--cle-background = #fff] Background color for the legend
 * @cssproperty [--cle-padding = 0.375rem] Padding in the legend's container div
 * @cssproperty [--cle-border = none] Border style of the legend's container div
 * @cssproperty [--cle-border-radius = 0] Border radius of the legend's container div
 * @cssproperty [--cle-box-sizing = content-box] Box-sizing property of the legend's container div
 * @cssproperty [--cle-columns = 2] Number of columns for categorical legends
 * @cssproperty [--cle-column-width = auto] Column width for categorical legends
 * @cssproperty [--cle-item-margin = 0.375rem 0.75rem 0 0] Margin property for categorical legend items
 * @cssproperty [--cle-line-width = 24px] Width of the "line" markType for categorical legends
 * @cssproperty [--cle-line-height = 2px] Height of the "line" markType for categorical legends
 * @cssproperty [--cle-swatch-size = 10px] Height & Width of "rect" and "circle" markTypes for categorical legends
 * @cssproperty [--cle-swatch-width = var(--cle-swatch-size)] Width of the "rect" and "circle" markTypes for categorical legends
 * @cssproperty [--cle-swatch-height = var(--cle-swatch-size)] Height of the "rect" and "circle" markTypes for categorical legends
 * @cssproperty [--cle-swatch-margin = 0 0.5rem 0 0] Margin of the mark (line, square, circle) for categorical legends
 **/
let ColorLegendElement = class ColorLegendElement extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * The title text that displays at the top of the legend
         */
        this.titleText = DEFAULT_TITLE_TEXT;
        /**
         * The width of the SVG or categorical legend div element
         */
        this.width = DEFAULT_WIDTH;
        /**
         * The height of the SVG element
         */
        this.height = DEFAULT_HEIGHT;
        /**
         * The spacing between the legend bar and top most extent of the SVG
         */
        this.marginTop = DEFAULT_MARGIN_TOP;
        /**
         * The spacing between the legend bar and right most extent of the SVG
         */
        this.marginRight = DEFAULT_MARGIN_RIGHT;
        /**
         * The spacing between the legend bar and bottom most extent of the SVG
         */
        this.marginBottom = DEFAULT_MARGIN_BOTTOM;
        /**
         * The spacing between the legend bar and left most extent of the SVG
         */
        this.marginLeft = DEFAULT_MARGIN_LEFT;
        /**
         * The type of legend to render based on d3-scale
         */
        this.scaleType = DEFAULT_SCALE_TYPE;
        /**
         * The color scale's domain values
         */
        this.domain = DEFAULT_DOMAIN;
        /**
         * The color scale's range values
         */
        this.range = DEFAULT_RANGE;
        /**
         * The symbology used for categorical legends
         */
        this.markType = DEFAULT_MARK_TYPE;
        /**
         * The desired number of axis ticks
         */
        this.ticks = DEFAULT_TICKS;
        /**
         * The d3-format specifier to format axis tick values
         */
        this.tickFormat = DEFAULT_TICK_FORMAT;
        /**
         * The size or length of the axis ticks
         */
        this.tickSize = DEFAULT_TICK_SIZE;
        /**
         * @ignore
         * Handles configuring the colorScale
         */
        this.colorScaleSetter = new ColorScaleSetter(this);
        /**
         * @ignore
         * Configures the x scale and axis ticks
         */
        this.axisTickSetter = new AxisTicksSetter(this);
        /**
         * @ignore
         * Handles rendering of HTML/SVG markup from the scaleType
         */
        this.renderer = new Renderer(this);
    }
    /**
     * a color interpolator function such as one from d3-scale-chromatic
     */
    get interpolator() {
        return this._interpolator;
    }
    set interpolator(value) {
        if (typeof value === "function") {
            const oldVal = this.interpolator;
            this._interpolator = value;
            this.requestUpdate("interpolator", oldVal);
        }
        else {
            throw new Error("interpolator must be a function.");
        }
    }
    /**
     * Function that formats the xAxis tick values, set internally but may also be set externally
     */
    get tickFormatter() {
        return this._tickFormatter;
    }
    set tickFormatter(value) {
        if (typeof value === "function") {
            const oldVal = this.tickFormatter;
            this._tickFormatter = value;
            this.requestUpdate("tickFormatter", oldVal);
        }
        else {
            throw new Error("tickFormatter must be a function.");
        }
    }
    /**
     * @ignore
     * A type of d3-scale for applying color values to the legend item(s),
     * set internally by the colorScaleSetter.
     */
    get colorScale() {
        return this.colorScaleSetter.colorScale;
    }
    /**
     * @ignore
     * A d3 linear scale used for generating axis ticks,
     * set internally by the axisTickSetter
     */
    get xScale() {
        return this.axisTickSetter.xScale;
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return any
     * value renderable by lit-html's ChildPart - typically a TemplateResult
     * @returns TemplateResult
     */
    render() {
        return this.renderer.render();
    }
    /**
     * Lit lifecycle method that is called before an update to the component's DOM
     * @param changedProps: ChangedProps
     */
    willUpdate(changedProps) {
        if (COLOR_SCALE_PROPS.some((prop) => changedProps.has(prop))) {
            this.colorScaleSetter.setColorScale();
        }
        if (AXIS_AND_X_SCALE_PROPS.some((prop) => changedProps.has(prop))) {
            this.axisTickSetter.setXScale();
            this.axisTickSetter.handleAxisTicks();
        }
    }
};
ColorLegendElement.styles = [styles];
__decorate([
    property({ type: String })
], ColorLegendElement.prototype, "titleText", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "width", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "height", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "marginTop", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "marginRight", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "marginBottom", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "marginLeft", void 0);
__decorate([
    property({ type: String })
], ColorLegendElement.prototype, "scaleType", void 0);
__decorate([
    property({ type: Array })
], ColorLegendElement.prototype, "domain", void 0);
__decorate([
    property({ type: Array })
], ColorLegendElement.prototype, "range", void 0);
__decorate([
    property({ type: String })
], ColorLegendElement.prototype, "markType", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "ticks", void 0);
__decorate([
    property({ type: String })
], ColorLegendElement.prototype, "tickFormat", void 0);
__decorate([
    property({ type: Number })
], ColorLegendElement.prototype, "tickSize", void 0);
__decorate([
    property({ type: Array })
], ColorLegendElement.prototype, "tickValues", void 0);
__decorate([
    query("svg")
], ColorLegendElement.prototype, "svg", void 0);
__decorate([
    property({ attribute: false })
], ColorLegendElement.prototype, "interpolator", null);
__decorate([
    property({ attribute: false })
], ColorLegendElement.prototype, "tickFormatter", null);
ColorLegendElement = __decorate([
    customElement("color-legend")
], ColorLegendElement);
export { ColorLegendElement };
//# sourceMappingURL=color-legend-element.js.map